/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.sdcio.config_server.apis.inv.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/sdcio/config-server/apis/condition/v1alpha1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option (gogoproto.marshaler_all) = true;
option (gogoproto.stable_marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;
option (gogoproto.goproto_getters_all) = false;
option go_package = "github.com/sdcio/config-server/apis/inv/v1alpha1";

message DiscoveryInfo {
  // Protocol used for discovery
  optional string protocol = 1 [(gogoproto.customname) = "Protocol", (gogoproto.nullable) = false];

  // Type associated with the target
  optional string provider = 2 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];

  // Version associated with the target
  optional string version = 3 [(gogoproto.customname) = "Version", (gogoproto.nullable) = false];

  // HostName associated with the target
  optional string hostname = 4 [(gogoproto.customname) = "HostName", (gogoproto.nullable) = false];

  // Platform associated with the target
  optional string platform = 5 [(gogoproto.customname) = "Platform", (gogoproto.nullable) = false];

  // MacAddress associated with the target
  optional string macAddress = 6 [(gogoproto.customname) = "MacAddress", (gogoproto.nullable) = false];

  // SerialNumber associated with the target
  optional string serialNumber = 7 [(gogoproto.customname) = "SerialNumber", (gogoproto.nullable) = false];

  // Supported Encodings of the target
  repeated string supportedEncodings = 8 [(gogoproto.customname) = "SupportedEncodings"];

  // Last discovery time
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastSeen = 9 [(gogoproto.customname) = "LastSeen", (gogoproto.nullable) = false];
}

message DiscoveryParameters {
  // DefaultSchema define the default schema used to connect to a target
  // Indicates that discovery is disable; cannot be used for prefix based discovery rules
  optional SchemaKey defaultSchema = 1 [(gogoproto.customname) = "DefaultSchema"];

  // DiscoveryProfile define the profiles the discovery controller uses to discover targets
  optional DiscoveryProfile discoveryProfile = 2 [(gogoproto.customname) = "DiscoveryProfile"];

  // TargetConnectionProfiles define the profile the discovery controller uses to create targets
  // once discovered
  repeated TargetProfile targetConnectionProfiles = 3 [(gogoproto.customname) = "TargetConnectionProfiles", (gogoproto.nullable) = false];

  // TargetTemplate defines the template the discovery controller uses to create the targets as a result of the discovery
  optional TargetTemplate targetTemplate = 4 [(gogoproto.customname) = "TargetTemplate"];

  // Period defines the wait period between discovery rule runs
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Duration period = 5 [(gogoproto.customname) = "Period", (gogoproto.nullable) = false];

  // number of concurrent IP scan
  optional int64 concurrentScans = 6 [(gogoproto.customname) = "ConcurrentScans", (gogoproto.nullable) = false];
}

message DiscoveryProfile {
  // Credentials defines the name of the secret that holds the credentials to connect to the target
  optional string credentials = 1 [(gogoproto.customname) = "Credentials", (gogoproto.nullable) = false];

  // TLSSecret defines the name of the TLS secret to connect to the target if mtls is used
  optional string tlsSecret = 2 [(gogoproto.customname) = "TLSSecret"];

  // ConnectionProfiles define the list of profiles the discovery controller uses to discover the target.
  // The order in which they are specified is the order in which discovery is executed.
  repeated string connectionProfiles = 3 [(gogoproto.customname) = "ConnectionProfiles"];
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:resource:categories={sdc,inv}
// DiscoveryRule is the Schema for the DiscoveryRule API
// +k8s:openapi-gen=true
message DiscoveryRule {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional DiscoveryRuleSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional DiscoveryRuleStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

message DiscoveryRuleAddress {
  // Address (specified as IP or DNS name) of the target/target(s)
  optional string address = 1 [(gogoproto.customname) = "Address", (gogoproto.nullable) = false];

  // HostName of the ip prefix; used for /32 or /128 addresses with discovery disabled
  optional string hostName = 2 [(gogoproto.customname) = "HostName", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// DiscoveryRuleList contains a list of DiscoveryRules
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message DiscoveryRuleList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated DiscoveryRule items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

message DiscoveryRulePrefix {
  // Prefix of the target/target(s)
  optional string prefix = 1 [(gogoproto.customname) = "Prefix", (gogoproto.nullable) = false];

  // IP Prefixes to be excluded
  repeated string excludes = 2 [(gogoproto.customname) = "Excludes"];
}

// DiscoveryRuleSpec defines the desired state of DiscoveryRule
message DiscoveryRuleSpec {
  // IP Prefixes for which this discovery rule applies
  repeated DiscoveryRulePrefix prefixes = 1 [(gogoproto.customname) = "Prefixes", (gogoproto.nullable) = false];

  // IP Prefixes for which this discovery rule applies
  repeated DiscoveryRuleAddress addresses = 2 [(gogoproto.customname) = "Addresses", (gogoproto.nullable) = false];

  // PodSelector defines the pod selector for which this discovery rule applies
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector podSelector = 3 [(gogoproto.customname) = "PodSelector"];

  // ServiceSelector defines the service selector for which this discovery rule applies
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector serviceSelector = 4 [(gogoproto.customname) = "ServiceSelector"];

  // ServiceDomain defines the service domain of the cluster, used by svc discovery to identify the
  // domain name in the k8s cluster where the service reside.
  optional string serviceDomain = 5 [(gogoproto.customname) = "ServiceDomain", (gogoproto.nullable) = false];

  // Discovery defines the generic parameters of the discovery rule
  optional DiscoveryParameters discoveryParameters = 6 [(gogoproto.customname) = "DiscoveryParameters", (gogoproto.nullable) = false];
}

// DiscoveryRuleStatus defines the observed state of DiscoveryRule
message DiscoveryRuleStatus {
  // ConditionedStatus provides the status of the Discovery using conditions
  // 2 conditions are used:
  // - a condition for the reconcilation status
  // - a condition for the ready status
  // if both are true the other attributes in the status are meaningful
  optional .github.com.sdcio.config_server.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];

  // StartTime identifies when the dr got started
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2 [(gogoproto.customname) = "StartTime", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="PROVIDER",type="string",JSONPath=".spec.provider"
// +kubebuilder:printcolumn:name="VERSION",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="URL",type="string",JSONPath=".spec.repositories[0].repoURL"
// +kubebuilder:printcolumn:name="REF",type="string",JSONPath=".spec.repositories[0].ref"
// +kubebuilder:resource:categories={sdc,inv}
// Schema is the Schema for the Schema API
// +k8s:openapi-gen=true
message Schema {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional SchemaSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional SchemaStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

message SchemaKey {
  // Provider specifies the provider of the schema.
  optional string provider = 1 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];

  // Version defines the version of the schema
  optional string version = 2 [(gogoproto.customname) = "Version", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// SchemaList contains a list of Schemas
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SchemaList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Schema items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// SchemaSpec defines the desired state of Schema
message SchemaSpec {
  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="provider is immutable"
  // Provider specifies the provider of the schema.
  optional string provider = 1 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="version is immutable"
  // Version defines the version of the schema
  optional string version = 2 [(gogoproto.customname) = "Version", (gogoproto.nullable) = false];

  // +kubebuilder:validation:MinItems:=1
  // +kubebuilder:validation:MaxItems:=10
  // Repositories define the repositories used for building the provider schema
  repeated SchemaSpecRepository repositories = 3 [(gogoproto.customname) = "Repositories"];
}

message SchemaSpecProxy {
  // URL specifies the base URL of the HTTP/HTTPS proxy server.
  optional string URL = 1 [(gogoproto.nullable) = false];

  // Credentials defines the name of the secret that holds the credentials to connect to the proxy server
  optional string credentials = 2 [(gogoproto.customname) = "Credentials", (gogoproto.nullable) = false];
}

message SchemaSpecRepository {
  // RepositoryURL specifies the base URL for a given repository
  optional string repoURL = 1 [(gogoproto.customname) = "RepositoryURL", (gogoproto.nullable) = false];

  // Credentials defines the name of the secret that holds the credentials to connect to the repo
  optional string credentials = 2 [(gogoproto.customname) = "Credentials", (gogoproto.nullable) = false];

  // Proxy defines the HTTP/HTTPS proxy to be used to download the models.
  optional SchemaSpecProxy proxy = 3 [(gogoproto.customname) = "Proxy", (gogoproto.nullable) = false];

  // +kubebuilder:validation:Enum=branch;tag;
  // +kubebuilder:default:=tag
  // Kind defines the that the BranchOrTag string is a repository branch or a tag
  optional string kind = 4 [(gogoproto.casttype) = "BranchTagKind", (gogoproto.customname) = "Kind", (gogoproto.nullable) = false];

  // Ref defines the branch or tag of the repository corresponding to the
  // provider schema version
  optional string ref = 5 [(gogoproto.customname) = "Ref", (gogoproto.nullable) = false];

  // +kubebuilder:validation:MaxItems=10
  // Dirs defines the list of directories that identified the provider schema in src/dst pairs
  // relative within the repository
  repeated SrcDstPath dirs = 6 [(gogoproto.customname) = "Dirs", (gogoproto.nullable) = false];

  // Schema provides the details of which files must be used for the models and which files/directories
  // cana be excludes
  optional SchemaSpecSchema schema = 7 [(gogoproto.customname) = "Schema", (gogoproto.nullable) = false];
}

message SchemaSpecSchema {
  // +kubebuilder:validation:MaxItems=64
  // Models defines the list of files/directories to be used as a model
  repeated string models = 1 [(gogoproto.customname) = "Models"];

  // +kubebuilder:validation:MaxItems=64
  // Excludes defines the list of files/directories to be excluded
  repeated string includes = 2 [(gogoproto.customname) = "Includes"];

  // +kubebuilder:validation:MaxItems=64
  // Excludes defines the list of files/directories to be excluded
  repeated string excludes = 3 [(gogoproto.customname) = "Excludes"];
}

// SchemaStatus defines the observed state of Schema
message SchemaStatus {
  // ConditionedStatus provides the status of the Schema using conditions
  optional .github.com.sdcio.config_server.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];
}

// SrcDstPath provide a src/dst pair for the loader to download the schema from a specific src
// in the repository to a given destination in the schema server
message SrcDstPath {
  // Src is the relative directory in the repository URL
  optional string src = 1 [(gogoproto.customname) = "Src", (gogoproto.nullable) = false];

  // Dst is the relative directory in the schema server
  optional string dst = 2 [(gogoproto.customname) = "Dst", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="REASON",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// +kubebuilder:printcolumn:name="PROVIDER",type="string",JSONPath=".spec.provider"
// +kubebuilder:printcolumn:name="ADDRESS",type="string",JSONPath=".spec.address"
// +kubebuilder:printcolumn:name="PLATFORM",type="string",JSONPath=".status.discoveryInfo.platform"
// +kubebuilder:printcolumn:name="SERIALNUMBER",type="string",JSONPath=".status.discoveryInfo.serialNumber"
// +kubebuilder:printcolumn:name="MACADDRESS",type="string",JSONPath=".status.discoveryInfo.macAddress"
// +kubebuilder:resource:categories={sdc,inv}
// Target is the Schema for the Target API
// +k8s:openapi-gen=true
message Target {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional TargetSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];

  optional TargetStatus status = 3 [(gogoproto.customname) = "Status", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={sdc,inv}
// TargetConnectionProfile is the Schema for the TargetConnectionProfile API
// +k8s:openapi-gen=true
message TargetConnectionProfile {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional TargetConnectionProfileSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// TargetConnectionProfileList contains a list of TargetConnectionProfile
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TargetConnectionProfileList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated TargetConnectionProfile items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// TargetConnectionProfileSpec defines the desired state of TargetConnectionProfile
message TargetConnectionProfileSpec {
  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="connectRetry is immutable"
  // +kubebuilder:default:="10s"
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Duration connectRetry = 1 [(gogoproto.customname) = "ConnectRetry", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="timeout is immutable"
  // +kubebuilder:default:="10s"
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Duration timeout = 2 [(gogoproto.customname) = "Timeout", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="protocol is immutable"
  // +kubebuilder:validation:Enum=unknown;gnmi;netconf;noop;
  // +kubebuilder:default:="gnmi"
  optional string protocol = 3 [(gogoproto.casttype) = "Protocol", (gogoproto.customname) = "Protocol", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="port is immutable"
  // +kubebuilder:default:=57400
  // Port defines the port on which the scan runs
  optional uint64 port = 4 [(gogoproto.customname) = "Port", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="encoding is immutable"
  // +kubebuilder:validation:Enum=UNKNOWN;JSON;JSON_IETF;PROTO;
  // +kubebuilder:default:="JSON_IETF"
  optional string encoding = 5 [(gogoproto.casttype) = "Encoding", (gogoproto.customname) = "Encoding", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="preferredNetconfVersion is immutable"
  // +kubebuilder:validation:Enum="1.0";"1.1";
  // +kubebuilder:default:="1.0"
  optional string preferredNetconfVersion = 6 [(gogoproto.customname) = "PreferredNetconfVersion", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="insecure is immutable"
  // +kubebuilder:default:=false
  optional bool insecure = 7 [(gogoproto.customname) = "Insecure", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="skipVerify is immutable"
  // +kubebuilder:default:=true
  optional bool skipVerify = 8 [(gogoproto.customname) = "SkipVerify", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="includeNS is immutable"
  // +kubebuilder:default:=false
  optional bool includeNS = 9 [(gogoproto.customname) = "IncludeNS", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="operationWithNS is immutable"
  // +kubebuilder:default:=false
  optional bool operationWithNS = 10 [(gogoproto.customname) = "OperationWithNS", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="UseOperationRemove is immutable"
  // +kubebuilder:default:=false
  optional bool useOperationRemove = 11 [(gogoproto.customname) = "UseOperationRemove", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="UseOperationRemove is immutable"
  // +kubebuilder:validation:Enum=candidate;running;
  // +kubebuilder:default:="candidate"
  optional string commitCandidate = 12 [(gogoproto.casttype) = "CommitCandidate", (gogoproto.customname) = "CommitCandidate", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// TargetList contains a list of Targets
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TargetList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated Target items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

message TargetProfile {
  // Credentials defines the name of the secret that holds the credentials to connect to the target
  optional string credentials = 1 [(gogoproto.customname) = "Credentials", (gogoproto.nullable) = false];

  // TLSSecret defines the name of the TLS secret to connect to the target if mtls is used
  optional string tlsSecret = 2 [(gogoproto.customname) = "TLSSecret"];

  // ConnectionProfile define the profile used to connect to the target once discovered
  optional string connectionProfile = 3 [(gogoproto.customname) = "ConnectionProfile", (gogoproto.nullable) = false];

  // SyncProfile define the profile used to sync to the target config once discovered
  optional string syncProfile = 4 [(gogoproto.customname) = "SyncProfile"];
}

// TargetSpec defines the desired state of Target
message TargetSpec {
  // Provider specifies the provider using this target.
  optional string provider = 1 [(gogoproto.customname) = "Provider", (gogoproto.nullable) = false];

  // Address defines the address to connect to the target
  optional string address = 2 [(gogoproto.customname) = "Address", (gogoproto.nullable) = false];

  // TargetProfile defines the Credentials/TLSSecret and sync/connectivity profile to connect to the target
  optional TargetProfile targetProfile = 3 [(gogoproto.customname) = "TargetProfile", (gogoproto.nullable) = false];
}

// TargetStatus defines the observed state of Target
message TargetStatus {
  // ConditionedStatus provides the status of the Target using conditions
  optional .github.com.sdcio.config_server.apis.condition.v1alpha1.ConditionedStatus conditionedStatus = 1 [(gogoproto.customname) = "ConditionedStatus", (gogoproto.nullable) = false];

  // Discovery info defines the information retrieved during discovery
  optional DiscoveryInfo discoveryInfo = 2 [(gogoproto.customname) = "DiscoveryInfo"];

  // UsedReferences track the resource used to reconcile the cr
  optional TargetStatusUsedReferences usedReferences = 3 [(gogoproto.customname) = "UsedReferences"];
}

message TargetStatusUsedReferences {
  optional string secretResourceVersion = 1 [(gogoproto.customname) = "SecretResourceVersion", (gogoproto.nullable) = false];

  optional string tlsSecretResourceVersion = 2 [(gogoproto.customname) = "TLSSecretResourceVersion", (gogoproto.nullable) = false];

  optional string connectionProfileResourceVersion = 3 [(gogoproto.customname) = "ConnectionProfileResourceVersion", (gogoproto.nullable) = false];

  optional string syncProfileResourceVersion = 4 [(gogoproto.customname) = "SyncProfileResourceVersion", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:resource:categories={sdc,inv}
// TargetSyncProfile is the Schema for the TargetSyncProfile API
// +k8s:openapi-gen=true
message TargetSyncProfile {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1 [(gogoproto.customname) = "ObjectMeta", (gogoproto.nullable) = false];

  optional TargetSyncProfileSpec spec = 2 [(gogoproto.customname) = "Spec", (gogoproto.nullable) = false];
}

// +kubebuilder:object:root=true
// TargetSyncProfileList contains a list of TargetSyncProfiles
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TargetSyncProfileList {
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1 [(gogoproto.customname) = "ListMeta", (gogoproto.nullable) = false];

  repeated TargetSyncProfile items = 2 [(gogoproto.customname) = "Items", (gogoproto.nullable) = false];
}

// +kubebuilder:validation:XValidation:rule="!has(oldSelf.sync) || has(self.sync)", message="sync is required once set"
// TargetSyncProfileSpec defines the desired state of TargetSyncProfile
message TargetSyncProfileSpec {
  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="validate is immutable"
  // +kubebuilder:default:=true
  optional bool validate = 1 [(gogoproto.customname) = "Validate", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="buffer is immutable"
  // +kubebuilder:default:=0
  optional int64 buffer = 2 [(gogoproto.customname) = "Buffer", (gogoproto.nullable) = false];

  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="workers is immutable"
  // +kubebuilder:default:=10
  optional int64 workers = 3 [(gogoproto.customname) = "Workers", (gogoproto.nullable) = false];

  // +kubebuilder:validation:MaxItems=10
  // +kubebuilder:validation:Optional
  // +kubebuilder:validation:XValidation:rule="oldSelf.all(x, x in self)",message="sync may only be added"
  repeated TargetSyncProfileSync sync = 4 [(gogoproto.customname) = "Sync", (gogoproto.nullable) = false];
}

// TargetSyncProfileSync defines the desired state of TargetSyncProfileSync
message TargetSyncProfileSync {
  optional string name = 1 [(gogoproto.customname) = "Name", (gogoproto.nullable) = false];

  // +kubebuilder:validation:Enum=unknown;gnmi;netconf;noop;
  // +kubebuilder:default:="gnmi"
  optional string protocol = 2 [(gogoproto.casttype) = "Protocol", (gogoproto.customname) = "Protocol", (gogoproto.nullable) = false];

  // +kubebuilder:default:=57400
  // Port defines the port on which the scan runs
  optional uint64 port = 3 [(gogoproto.customname) = "Port", (gogoproto.nullable) = false];

  // +kubebuilder:validation:MaxItems=10
  repeated string paths = 4 [(gogoproto.customname) = "Paths"];

  // +kubebuilder:validation:Enum=unknown;onChange;sample;once;get;
  // +kubebuilder:default:="get"
  optional string mode = 5 [(gogoproto.casttype) = "SyncMode", (gogoproto.customname) = "Mode", (gogoproto.nullable) = false];

  // +kubebuilder:validation:Enum=UNKNOWN;JSON;JSON_IETF;PROTO;CONFIG;
  // +kubebuilder:default:="JSON_IETF"
  optional string encoding = 6 [(gogoproto.casttype) = "Encoding", (gogoproto.customname) = "Encoding", (gogoproto.nullable) = false];

  // +kubebuilder:validation:Type=string
  // +kubebuilder:validation:Format=duration
  // +kubebuilder:validation:Description="Duration should be a string representing a duration in seconds, minutes, or hours. E.g., '300s', '5m', '1h'."
  // +kubebuilder:default:="60s"
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Duration interval = 7 [(gogoproto.customname) = "Interval", (gogoproto.nullable) = false];
}

// TargetTemplate defines the template of the target
message TargetTemplate {
  // +kubebuilder:validation:XValidation:rule="self == oldSelf",message="nameTemplate is immutable"
  // target name template
  optional string nameTemplate = 1 [(gogoproto.customname) = "NameTemplate", (gogoproto.nullable) = false];

  // Annotations is a key value map to be copied to the target CR.
  // +optional
  map<string, string> annotations = 2 [(gogoproto.customname) = "Annotations", (gogoproto.nullable) = false];

  // Labels is a key value map to be copied to the target CR.
  // +optional
  map<string, string> labels = 3 [(gogoproto.customname) = "Labels", (gogoproto.nullable) = false];
}

